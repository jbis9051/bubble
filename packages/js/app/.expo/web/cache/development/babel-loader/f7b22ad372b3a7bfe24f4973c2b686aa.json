{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addNode = addNode;\nexports.attachListeners = attachListeners;\nexports.getResponderNode = getResponderNode;\nexports.removeNode = removeNode;\nexports.terminateResponder = terminateResponder;\n\nvar _ExecutionEnvironment = require(\"fbjs/lib/ExecutionEnvironment\");\n\nvar _createResponderEvent = _interopRequireDefault(require(\"./createResponderEvent\"));\n\nvar _ResponderEventTypes = require(\"./ResponderEventTypes\");\n\nvar _utils = require(\"./utils\");\n\nvar _ResponderTouchHistoryStore = _interopRequireDefault(require(\"./ResponderTouchHistoryStore\"));\n\nvar emptyObject = {};\nvar startRegistration = ['onStartShouldSetResponderCapture', 'onStartShouldSetResponder', {\n  bubbles: true\n}];\nvar moveRegistration = ['onMoveShouldSetResponderCapture', 'onMoveShouldSetResponder', {\n  bubbles: true\n}];\nvar scrollRegistration = ['onScrollShouldSetResponderCapture', 'onScrollShouldSetResponder', {\n  bubbles: false\n}];\nvar shouldSetResponderEvents = {\n  touchstart: startRegistration,\n  mousedown: startRegistration,\n  touchmove: moveRegistration,\n  mousemove: moveRegistration,\n  scroll: scrollRegistration\n};\nvar emptyResponder = {\n  id: null,\n  idPath: null,\n  node: null\n};\nvar responderListenersMap = new Map();\nvar isEmulatingMouseEvents = false;\nvar trackedTouchCount = 0;\nvar currentResponder = {\n  id: null,\n  node: null,\n  idPath: null\n};\n\nfunction changeCurrentResponder(responder) {\n  currentResponder = responder;\n}\n\nfunction getResponderConfig(id) {\n  var config = responderListenersMap.get(id);\n  return config != null ? config : emptyObject;\n}\n\nfunction eventListener(domEvent) {\n  var eventType = domEvent.type;\n  var eventTarget = domEvent.target;\n\n  if (eventType === 'touchstart') {\n    isEmulatingMouseEvents = true;\n  }\n\n  if (eventType === 'touchmove' || trackedTouchCount > 1) {\n    isEmulatingMouseEvents = false;\n  }\n\n  if (eventType === 'mousedown' && isEmulatingMouseEvents || eventType === 'mousemove' && isEmulatingMouseEvents || eventType === 'mousemove' && trackedTouchCount < 1) {\n    return;\n  }\n\n  if (isEmulatingMouseEvents && eventType === 'mouseup') {\n    if (trackedTouchCount === 0) {\n      isEmulatingMouseEvents = false;\n    }\n\n    return;\n  }\n\n  var isStartEvent = (0, _ResponderEventTypes.isStartish)(eventType) && (0, _utils.isPrimaryPointerDown)(domEvent);\n  var isMoveEvent = (0, _ResponderEventTypes.isMoveish)(eventType);\n  var isEndEvent = (0, _ResponderEventTypes.isEndish)(eventType);\n  var isScrollEvent = (0, _ResponderEventTypes.isScroll)(eventType);\n  var isSelectionChangeEvent = (0, _ResponderEventTypes.isSelectionChange)(eventType);\n  var responderEvent = (0, _createResponderEvent.default)(domEvent);\n\n  if (isStartEvent || isMoveEvent || isEndEvent) {\n    if (domEvent.touches) {\n      trackedTouchCount = domEvent.touches.length;\n    } else {\n      if (isStartEvent) {\n        trackedTouchCount = 1;\n      } else if (isEndEvent) {\n        trackedTouchCount = 0;\n      }\n    }\n\n    _ResponderTouchHistoryStore.default.recordTouchTrack(eventType, responderEvent.nativeEvent);\n  }\n\n  var eventPaths = (0, _utils.getResponderPaths)(domEvent);\n  var wasNegotiated = false;\n  var wantsResponder;\n\n  if (isStartEvent || isMoveEvent || isScrollEvent && trackedTouchCount > 0) {\n    var currentResponderIdPath = currentResponder.idPath;\n    var eventIdPath = eventPaths.idPath;\n\n    if (currentResponderIdPath != null && eventIdPath != null) {\n      var lowestCommonAncestor = (0, _utils.getLowestCommonAncestor)(currentResponderIdPath, eventIdPath);\n\n      if (lowestCommonAncestor != null) {\n        var indexOfLowestCommonAncestor = eventIdPath.indexOf(lowestCommonAncestor);\n        var index = indexOfLowestCommonAncestor + (lowestCommonAncestor === currentResponder.id ? 1 : 0);\n        eventPaths = {\n          idPath: eventIdPath.slice(index),\n          nodePath: eventPaths.nodePath.slice(index)\n        };\n      } else {\n        eventPaths = null;\n      }\n    }\n\n    if (eventPaths != null) {\n      wantsResponder = findWantsResponder(eventPaths, domEvent, responderEvent);\n\n      if (wantsResponder != null) {\n        attemptTransfer(responderEvent, wantsResponder);\n        wasNegotiated = true;\n      }\n    }\n  }\n\n  if (currentResponder.id != null && currentResponder.node != null) {\n    var _currentResponder = currentResponder,\n        id = _currentResponder.id,\n        node = _currentResponder.node;\n\n    var _getResponderConfig = getResponderConfig(id),\n        onResponderStart = _getResponderConfig.onResponderStart,\n        onResponderMove = _getResponderConfig.onResponderMove,\n        onResponderEnd = _getResponderConfig.onResponderEnd,\n        onResponderRelease = _getResponderConfig.onResponderRelease,\n        onResponderTerminate = _getResponderConfig.onResponderTerminate,\n        onResponderTerminationRequest = _getResponderConfig.onResponderTerminationRequest;\n\n    responderEvent.bubbles = false;\n    responderEvent.cancelable = false;\n    responderEvent.currentTarget = node;\n\n    if (isStartEvent) {\n      if (onResponderStart != null) {\n        responderEvent.dispatchConfig.registrationName = 'onResponderStart';\n        onResponderStart(responderEvent);\n      }\n    } else if (isMoveEvent) {\n      if (onResponderMove != null) {\n        responderEvent.dispatchConfig.registrationName = 'onResponderMove';\n        onResponderMove(responderEvent);\n      }\n    } else {\n      var isTerminateEvent = (0, _ResponderEventTypes.isCancelish)(eventType) || eventType === 'contextmenu' || eventType === 'blur' && eventTarget === window || eventType === 'blur' && eventTarget.contains(node) && domEvent.relatedTarget !== node || isScrollEvent && trackedTouchCount === 0 || isScrollEvent && eventTarget.contains(node) && eventTarget !== node || isSelectionChangeEvent && (0, _utils.hasValidSelection)(domEvent);\n      var isReleaseEvent = isEndEvent && !isTerminateEvent && !(0, _utils.hasTargetTouches)(node, domEvent.touches);\n\n      if (isEndEvent) {\n        if (onResponderEnd != null) {\n          responderEvent.dispatchConfig.registrationName = 'onResponderEnd';\n          onResponderEnd(responderEvent);\n        }\n      }\n\n      if (isReleaseEvent) {\n        if (onResponderRelease != null) {\n          responderEvent.dispatchConfig.registrationName = 'onResponderRelease';\n          onResponderRelease(responderEvent);\n        }\n\n        changeCurrentResponder(emptyResponder);\n      }\n\n      if (isTerminateEvent) {\n        var shouldTerminate = true;\n\n        if (eventType === 'contextmenu' || eventType === 'scroll' || eventType === 'selectionchange') {\n          if (wasNegotiated) {\n            shouldTerminate = false;\n          } else if (onResponderTerminationRequest != null) {\n            responderEvent.dispatchConfig.registrationName = 'onResponderTerminationRequest';\n\n            if (onResponderTerminationRequest(responderEvent) === false) {\n              shouldTerminate = false;\n            }\n          }\n        }\n\n        if (shouldTerminate) {\n          if (onResponderTerminate != null) {\n            responderEvent.dispatchConfig.registrationName = 'onResponderTerminate';\n            onResponderTerminate(responderEvent);\n          }\n\n          changeCurrentResponder(emptyResponder);\n          isEmulatingMouseEvents = false;\n          trackedTouchCount = 0;\n        }\n      }\n    }\n  }\n}\n\nfunction findWantsResponder(eventPaths, domEvent, responderEvent) {\n  var shouldSetCallbacks = shouldSetResponderEvents[domEvent.type];\n\n  if (shouldSetCallbacks != null) {\n    var idPath = eventPaths.idPath,\n        nodePath = eventPaths.nodePath;\n    var shouldSetCallbackCaptureName = shouldSetCallbacks[0];\n    var shouldSetCallbackBubbleName = shouldSetCallbacks[1];\n    var bubbles = shouldSetCallbacks[2].bubbles;\n\n    var check = function check(id, node, callbackName) {\n      var config = getResponderConfig(id);\n      var shouldSetCallback = config[callbackName];\n\n      if (shouldSetCallback != null) {\n        responderEvent.currentTarget = node;\n\n        if (shouldSetCallback(responderEvent) === true) {\n          var prunedIdPath = idPath.slice(idPath.indexOf(id));\n          return {\n            id: id,\n            node: node,\n            idPath: prunedIdPath\n          };\n        }\n      }\n    };\n\n    for (var i = idPath.length - 1; i >= 0; i--) {\n      var id = idPath[i];\n      var node = nodePath[i];\n      var result = check(id, node, shouldSetCallbackCaptureName);\n\n      if (result != null) {\n        return result;\n      }\n\n      if (responderEvent.isPropagationStopped() === true) {\n        return;\n      }\n    }\n\n    if (bubbles) {\n      for (var _i = 0; _i < idPath.length; _i++) {\n        var _id = idPath[_i];\n        var _node = nodePath[_i];\n\n        var _result = check(_id, _node, shouldSetCallbackBubbleName);\n\n        if (_result != null) {\n          return _result;\n        }\n\n        if (responderEvent.isPropagationStopped() === true) {\n          return;\n        }\n      }\n    } else {\n      var _id2 = idPath[0];\n      var _node2 = nodePath[0];\n      var target = domEvent.target;\n\n      if (target === _node2) {\n        return check(_id2, _node2, shouldSetCallbackBubbleName);\n      }\n    }\n  }\n}\n\nfunction attemptTransfer(responderEvent, wantsResponder) {\n  var _currentResponder2 = currentResponder,\n      currentId = _currentResponder2.id,\n      currentNode = _currentResponder2.node;\n  var id = wantsResponder.id,\n      node = wantsResponder.node;\n\n  var _getResponderConfig2 = getResponderConfig(id),\n      onResponderGrant = _getResponderConfig2.onResponderGrant,\n      onResponderReject = _getResponderConfig2.onResponderReject;\n\n  responderEvent.bubbles = false;\n  responderEvent.cancelable = false;\n  responderEvent.currentTarget = node;\n\n  if (currentId == null) {\n    if (onResponderGrant != null) {\n      responderEvent.currentTarget = node;\n      responderEvent.dispatchConfig.registrationName = 'onResponderGrant';\n      onResponderGrant(responderEvent);\n    }\n\n    changeCurrentResponder(wantsResponder);\n  } else {\n    var _getResponderConfig3 = getResponderConfig(currentId),\n        onResponderTerminate = _getResponderConfig3.onResponderTerminate,\n        onResponderTerminationRequest = _getResponderConfig3.onResponderTerminationRequest;\n\n    var allowTransfer = true;\n\n    if (onResponderTerminationRequest != null) {\n      responderEvent.currentTarget = currentNode;\n      responderEvent.dispatchConfig.registrationName = 'onResponderTerminationRequest';\n\n      if (onResponderTerminationRequest(responderEvent) === false) {\n        allowTransfer = false;\n      }\n    }\n\n    if (allowTransfer) {\n      if (onResponderTerminate != null) {\n        responderEvent.currentTarget = currentNode;\n        responderEvent.dispatchConfig.registrationName = 'onResponderTerminate';\n        onResponderTerminate(responderEvent);\n      }\n\n      if (onResponderGrant != null) {\n        responderEvent.currentTarget = node;\n        responderEvent.dispatchConfig.registrationName = 'onResponderGrant';\n        onResponderGrant(responderEvent);\n      }\n\n      changeCurrentResponder(wantsResponder);\n    } else {\n      if (onResponderReject != null) {\n        responderEvent.currentTarget = node;\n        responderEvent.dispatchConfig.registrationName = 'onResponderReject';\n        onResponderReject(responderEvent);\n      }\n    }\n  }\n}\n\nvar documentEventsCapturePhase = ['blur', 'scroll'];\nvar documentEventsBubblePhase = ['mousedown', 'mousemove', 'mouseup', 'dragstart', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'contextmenu', 'select', 'selectionchange'];\n\nfunction attachListeners() {\n  if (_ExecutionEnvironment.canUseDOM && window.__reactResponderSystemActive == null) {\n    window.addEventListener('blur', eventListener);\n    documentEventsBubblePhase.forEach(function (eventType) {\n      document.addEventListener(eventType, eventListener);\n    });\n    documentEventsCapturePhase.forEach(function (eventType) {\n      document.addEventListener(eventType, eventListener, true);\n    });\n    window.__reactResponderSystemActive = true;\n  }\n}\n\nfunction addNode(id, node, config) {\n  (0, _utils.setResponderId)(node, id);\n  responderListenersMap.set(id, config);\n}\n\nfunction removeNode(id) {\n  if (currentResponder.id === id) {\n    terminateResponder();\n  }\n\n  if (responderListenersMap.has(id)) {\n    responderListenersMap.delete(id);\n  }\n}\n\nfunction terminateResponder() {\n  var _currentResponder3 = currentResponder,\n      id = _currentResponder3.id,\n      node = _currentResponder3.node;\n\n  if (id != null && node != null) {\n    var _getResponderConfig4 = getResponderConfig(id),\n        onResponderTerminate = _getResponderConfig4.onResponderTerminate;\n\n    if (onResponderTerminate != null) {\n      var event = (0, _createResponderEvent.default)({});\n      event.currentTarget = node;\n      onResponderTerminate(event);\n    }\n\n    changeCurrentResponder(emptyResponder);\n  }\n\n  isEmulatingMouseEvents = false;\n  trackedTouchCount = 0;\n}\n\nfunction getResponderNode() {\n  return currentResponder.node;\n}","map":{"version":3,"names":["emptyObject","startRegistration","bubbles","moveRegistration","scrollRegistration","shouldSetResponderEvents","touchstart","mousedown","touchmove","mousemove","scroll","emptyResponder","id","idPath","node","responderListenersMap","Map","isEmulatingMouseEvents","trackedTouchCount","currentResponder","changeCurrentResponder","responder","getResponderConfig","config","get","eventListener","domEvent","eventType","type","eventTarget","target","isStartEvent","isStartish","isPrimaryPointerDown","isMoveEvent","isMoveish","isEndEvent","isEndish","isScrollEvent","isScroll","isSelectionChangeEvent","isSelectionChange","responderEvent","createResponderEvent","touches","length","ResponderTouchHistoryStore","recordTouchTrack","nativeEvent","eventPaths","getResponderPaths","wasNegotiated","wantsResponder","currentResponderIdPath","eventIdPath","lowestCommonAncestor","getLowestCommonAncestor","indexOfLowestCommonAncestor","indexOf","index","slice","nodePath","findWantsResponder","attemptTransfer","_currentResponder","_getResponderConfig","onResponderStart","onResponderMove","onResponderEnd","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","cancelable","currentTarget","dispatchConfig","registrationName","isTerminateEvent","isCancelish","window","contains","relatedTarget","hasValidSelection","isReleaseEvent","hasTargetTouches","shouldTerminate","shouldSetCallbacks","shouldSetCallbackCaptureName","shouldSetCallbackBubbleName","check","callbackName","shouldSetCallback","prunedIdPath","i","result","isPropagationStopped","_i","_id","_node","_result","_id2","_node2","_currentResponder2","currentId","currentNode","_getResponderConfig2","onResponderGrant","onResponderReject","_getResponderConfig3","allowTransfer","documentEventsCapturePhase","documentEventsBubblePhase","attachListeners","canUseDOM","__reactResponderSystemActive","addEventListener","forEach","document","addNode","setResponderId","set","removeNode","terminateResponder","has","delete","_currentResponder3","_getResponderConfig4","event","getResponderNode"],"sources":["/Users/nick/WebstormProjects/life256/packages/js/node_modules/react-native-web/dist/modules/useResponderEvents/ResponderSystem.js"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * RESPONDER EVENT SYSTEM\n *\n * A single, global \"interaction lock\" on views. For a view to be the \"responder\" means\n * that pointer interactions are exclusive to that view and none other. The \"interaction\n * lock\" can be transferred (only) to ancestors of the current \"responder\" as long as\n * pointers continue to be active.\n *\n * Responder being granted:\n *\n * A view can become the \"responder\" after the following events:\n *  * \"pointerdown\" (implemented using \"touchstart\", \"mousedown\")\n *  * \"pointermove\" (implemented using \"touchmove\", \"mousemove\")\n *  * \"scroll\" (while a pointer is down)\n *  * \"selectionchange\" (while a pointer is down)\n *\n * If nothing is already the \"responder\", the event propagates to (capture) and from\n * (bubble) the event target until a view returns `true` for\n * `on*ShouldSetResponder(Capture)`.\n *\n * If something is already the responder, the event propagates to (capture) and from\n * (bubble) the lowest common ancestor of the event target and the current \"responder\".\n * Then negotiation happens between the current \"responder\" and a view that wants to\n * become the \"responder\": see the timing diagram below.\n *\n * (NOTE: Scrolled views either automatically become the \"responder\" or release the\n * \"interaction lock\". A native scroll view that isn't built on top of the responder\n * system must result in the current \"responder\" being notified that it no longer has\n * the \"interaction lock\" - the native system has taken over.\n *\n * Responder being released:\n *\n * As soon as there are no more active pointers that *started* inside descendants\n * of the *current* \"responder\", an `onResponderRelease` event is dispatched to the\n * current \"responder\", and the responder lock is released.\n *\n * Typical sequence of events:\n *  * startShouldSetResponder\n *  * responderGrant/Reject\n *  * responderStart\n *  * responderMove\n *  * responderEnd\n *  * responderRelease\n */\n\n/*                                             Negotiation Performed\n                                             +-----------------------+\n                                            /                         \\\nProcess low level events to    +     Current Responder      +   wantsResponderID\ndetermine who to perform negot-|   (if any exists at all)   |\niation/transition              | Otherwise just pass through|\n-------------------------------+----------------------------+------------------+\nBubble to find first ID        |                            |\nto return true:wantsResponderID|                            |\n                               |                            |\n     +--------------+          |                            |\n     | onTouchStart |          |                            |\n     +------+-------+    none  |                            |\n            |            return|                            |\n+-----------v-------------+true| +------------------------+ |\n|onStartShouldSetResponder|----->| onResponderStart (cur) |<-----------+\n+-----------+-------------+    | +------------------------+ |          |\n            |                  |                            | +--------+-------+\n            | returned true for|       false:REJECT +-------->|onResponderReject\n            | wantsResponderID |                    |       | +----------------+\n            | (now attempt     | +------------------+-----+ |\n            |  handoff)        | | onResponder            | |\n            +------------------->|    TerminationRequest  | |\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |         true:GRANT +-------->|onResponderGrant|\n                               |                            | +--------+-------+\n                               | +------------------------+ |          |\n                               | | onResponderTerminate   |<-----------+\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |                    +-------->|onResponderStart|\n                               |                            | +----------------+\nBubble to find first ID        |                            |\nto return true:wantsResponderID|                            |\n                               |                            |\n     +-------------+           |                            |\n     | onTouchMove |           |                            |\n     +------+------+     none  |                            |\n            |            return|                            |\n+-----------v-------------+true| +------------------------+ |\n|onMoveShouldSetResponder |----->| onResponderMove (cur)  |<-----------+\n+-----------+-------------+    | +------------------------+ |          |\n            |                  |                            | +--------+-------+\n            | returned true for|       false:REJECT +-------->|onResponderReject\n            | wantsResponderID |                    |       | +----------------+\n            | (now attempt     | +------------------+-----+ |\n            |  handoff)        | |   onResponder          | |\n            +------------------->|      TerminationRequest| |\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |         true:GRANT +-------->|onResponderGrant|\n                               |                            | +--------+-------+\n                               | +------------------------+ |          |\n                               | |   onResponderTerminate |<-----------+\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |                    +-------->|onResponderMove |\n                               |                            | +----------------+\n                               |                            |\n                               |                            |\n      Some active touch started|                            |\n      inside current responder | +------------------------+ |\n      +------------------------->|      onResponderEnd    | |\n      |                        | +------------------------+ |\n  +---+---------+              |                            |\n  | onTouchEnd  |              |                            |\n  +---+---------+              |                            |\n      |                        | +------------------------+ |\n      +------------------------->|     onResponderEnd     | |\n      No active touches started| +-----------+------------+ |\n      inside current responder |             |              |\n                               |             v              |\n                               | +------------------------+ |\n                               | |    onResponderRelease  | |\n                               | +------------------------+ |\n                               |                            |\n                               +                            + */\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport createResponderEvent from './createResponderEvent';\nimport { isCancelish, isEndish, isMoveish, isScroll, isSelectionChange, isStartish } from './ResponderEventTypes';\nimport { getLowestCommonAncestor, getResponderPaths, hasTargetTouches, hasValidSelection, isPrimaryPointerDown, setResponderId } from './utils';\nimport ResponderTouchHistoryStore from './ResponderTouchHistoryStore';\n/* ------------ TYPES ------------ */\n\nvar emptyObject = {};\n/* ------------ IMPLEMENTATION ------------ */\n\nvar startRegistration = ['onStartShouldSetResponderCapture', 'onStartShouldSetResponder', {\n  bubbles: true\n}];\nvar moveRegistration = ['onMoveShouldSetResponderCapture', 'onMoveShouldSetResponder', {\n  bubbles: true\n}];\nvar scrollRegistration = ['onScrollShouldSetResponderCapture', 'onScrollShouldSetResponder', {\n  bubbles: false\n}];\nvar shouldSetResponderEvents = {\n  touchstart: startRegistration,\n  mousedown: startRegistration,\n  touchmove: moveRegistration,\n  mousemove: moveRegistration,\n  scroll: scrollRegistration\n};\nvar emptyResponder = {\n  id: null,\n  idPath: null,\n  node: null\n};\nvar responderListenersMap = new Map();\nvar isEmulatingMouseEvents = false;\nvar trackedTouchCount = 0;\nvar currentResponder = {\n  id: null,\n  node: null,\n  idPath: null\n};\n\nfunction changeCurrentResponder(responder) {\n  currentResponder = responder;\n}\n\nfunction getResponderConfig(id) {\n  var config = responderListenersMap.get(id);\n  return config != null ? config : emptyObject;\n}\n/**\n * Process native events\n *\n * A single event listener is used to manage the responder system.\n * All pointers are tracked in the ResponderTouchHistoryStore. Native events\n * are interpreted in terms of the Responder System and checked to see if\n * the responder should be transferred. Each host node that is attached to\n * the Responder System has an ID, which is used to look up its associated\n * callbacks.\n */\n\n\nfunction eventListener(domEvent) {\n  var eventType = domEvent.type;\n  var eventTarget = domEvent.target;\n  /**\n   * Manage emulated events and early bailout.\n   * Since PointerEvent is not used yet (lack of support in older Safari), it's\n   * necessary to manually manage the mess of browser touch/mouse events.\n   * And bailout early for termination events when there is no active responder.\n   */\n  // Flag when browser may produce emulated events\n\n  if (eventType === 'touchstart') {\n    isEmulatingMouseEvents = true;\n  } // Remove flag when browser will not produce emulated events\n\n\n  if (eventType === 'touchmove' || trackedTouchCount > 1) {\n    isEmulatingMouseEvents = false;\n  } // Ignore various events in particular circumstances\n\n\n  if ( // Ignore browser emulated mouse events\n  eventType === 'mousedown' && isEmulatingMouseEvents || eventType === 'mousemove' && isEmulatingMouseEvents || // Ignore mousemove if a mousedown didn't occur first\n  eventType === 'mousemove' && trackedTouchCount < 1) {\n    return;\n  } // Remove flag after emulated events are finished\n\n\n  if (isEmulatingMouseEvents && eventType === 'mouseup') {\n    if (trackedTouchCount === 0) {\n      isEmulatingMouseEvents = false;\n    }\n\n    return;\n  }\n\n  var isStartEvent = isStartish(eventType) && isPrimaryPointerDown(domEvent);\n  var isMoveEvent = isMoveish(eventType);\n  var isEndEvent = isEndish(eventType);\n  var isScrollEvent = isScroll(eventType);\n  var isSelectionChangeEvent = isSelectionChange(eventType);\n  var responderEvent = createResponderEvent(domEvent);\n  /**\n   * Record the state of active pointers\n   */\n\n  if (isStartEvent || isMoveEvent || isEndEvent) {\n    if (domEvent.touches) {\n      trackedTouchCount = domEvent.touches.length;\n    } else {\n      if (isStartEvent) {\n        trackedTouchCount = 1;\n      } else if (isEndEvent) {\n        trackedTouchCount = 0;\n      }\n    }\n\n    ResponderTouchHistoryStore.recordTouchTrack(eventType, responderEvent.nativeEvent);\n  }\n  /**\n   * Responder System logic\n   */\n\n\n  var eventPaths = getResponderPaths(domEvent);\n  var wasNegotiated = false;\n  var wantsResponder; // If an event occured that might change the current responder...\n\n  if (isStartEvent || isMoveEvent || isScrollEvent && trackedTouchCount > 0) {\n    // If there is already a responder, prune the event paths to the lowest common ancestor\n    // of the existing responder and deepest target of the event.\n    var currentResponderIdPath = currentResponder.idPath;\n    var eventIdPath = eventPaths.idPath;\n\n    if (currentResponderIdPath != null && eventIdPath != null) {\n      var lowestCommonAncestor = getLowestCommonAncestor(currentResponderIdPath, eventIdPath);\n\n      if (lowestCommonAncestor != null) {\n        var indexOfLowestCommonAncestor = eventIdPath.indexOf(lowestCommonAncestor); // Skip the current responder so it doesn't receive unexpected \"shouldSet\" events.\n\n        var index = indexOfLowestCommonAncestor + (lowestCommonAncestor === currentResponder.id ? 1 : 0);\n        eventPaths = {\n          idPath: eventIdPath.slice(index),\n          nodePath: eventPaths.nodePath.slice(index)\n        };\n      } else {\n        eventPaths = null;\n      }\n    }\n\n    if (eventPaths != null) {\n      // If a node wants to become the responder, attempt to transfer.\n      wantsResponder = findWantsResponder(eventPaths, domEvent, responderEvent);\n\n      if (wantsResponder != null) {\n        // Sets responder if none exists, or negotates with existing responder.\n        attemptTransfer(responderEvent, wantsResponder);\n        wasNegotiated = true;\n      }\n    }\n  } // If there is now a responder, invoke its callbacks for the lifecycle of the gesture.\n\n\n  if (currentResponder.id != null && currentResponder.node != null) {\n    var _currentResponder = currentResponder,\n        id = _currentResponder.id,\n        node = _currentResponder.node;\n\n    var _getResponderConfig = getResponderConfig(id),\n        onResponderStart = _getResponderConfig.onResponderStart,\n        onResponderMove = _getResponderConfig.onResponderMove,\n        onResponderEnd = _getResponderConfig.onResponderEnd,\n        onResponderRelease = _getResponderConfig.onResponderRelease,\n        onResponderTerminate = _getResponderConfig.onResponderTerminate,\n        onResponderTerminationRequest = _getResponderConfig.onResponderTerminationRequest;\n\n    responderEvent.bubbles = false;\n    responderEvent.cancelable = false;\n    responderEvent.currentTarget = node; // Start\n\n    if (isStartEvent) {\n      if (onResponderStart != null) {\n        responderEvent.dispatchConfig.registrationName = 'onResponderStart';\n        onResponderStart(responderEvent);\n      }\n    } // Move\n    else if (isMoveEvent) {\n        if (onResponderMove != null) {\n          responderEvent.dispatchConfig.registrationName = 'onResponderMove';\n          onResponderMove(responderEvent);\n        }\n      } else {\n        var isTerminateEvent = isCancelish(eventType) || // native context menu\n        eventType === 'contextmenu' || // window blur\n        eventType === 'blur' && eventTarget === window || // responder (or ancestors) blur\n        eventType === 'blur' && eventTarget.contains(node) && domEvent.relatedTarget !== node || // native scroll without using a pointer\n        isScrollEvent && trackedTouchCount === 0 || // native scroll on node that is parent of the responder (allow siblings to scroll)\n        isScrollEvent && eventTarget.contains(node) && eventTarget !== node || // native select/selectionchange on node\n        isSelectionChangeEvent && hasValidSelection(domEvent);\n        var isReleaseEvent = isEndEvent && !isTerminateEvent && !hasTargetTouches(node, domEvent.touches); // End\n\n        if (isEndEvent) {\n          if (onResponderEnd != null) {\n            responderEvent.dispatchConfig.registrationName = 'onResponderEnd';\n            onResponderEnd(responderEvent);\n          }\n        } // Release\n\n\n        if (isReleaseEvent) {\n          if (onResponderRelease != null) {\n            responderEvent.dispatchConfig.registrationName = 'onResponderRelease';\n            onResponderRelease(responderEvent);\n          }\n\n          changeCurrentResponder(emptyResponder);\n        } // Terminate\n\n\n        if (isTerminateEvent) {\n          var shouldTerminate = true; // Responders can still avoid termination but only for these events.\n\n          if (eventType === 'contextmenu' || eventType === 'scroll' || eventType === 'selectionchange') {\n            // Only call this function is it wasn't already called during negotiation.\n            if (wasNegotiated) {\n              shouldTerminate = false;\n            } else if (onResponderTerminationRequest != null) {\n              responderEvent.dispatchConfig.registrationName = 'onResponderTerminationRequest';\n\n              if (onResponderTerminationRequest(responderEvent) === false) {\n                shouldTerminate = false;\n              }\n            }\n          }\n\n          if (shouldTerminate) {\n            if (onResponderTerminate != null) {\n              responderEvent.dispatchConfig.registrationName = 'onResponderTerminate';\n              onResponderTerminate(responderEvent);\n            }\n\n            changeCurrentResponder(emptyResponder);\n            isEmulatingMouseEvents = false;\n            trackedTouchCount = 0;\n          }\n        }\n      }\n  }\n}\n/**\n * Walk the event path to/from the target node. At each node, stop and call the\n * relevant \"shouldSet\" functions for the given event type. If any of those functions\n * call \"stopPropagation\" on the event, stop searching for a responder.\n */\n\n\nfunction findWantsResponder(eventPaths, domEvent, responderEvent) {\n  var shouldSetCallbacks = shouldSetResponderEvents[domEvent.type]; // for Flow\n\n  if (shouldSetCallbacks != null) {\n    var idPath = eventPaths.idPath,\n        nodePath = eventPaths.nodePath;\n    var shouldSetCallbackCaptureName = shouldSetCallbacks[0];\n    var shouldSetCallbackBubbleName = shouldSetCallbacks[1];\n    var bubbles = shouldSetCallbacks[2].bubbles;\n\n    var check = function check(id, node, callbackName) {\n      var config = getResponderConfig(id);\n      var shouldSetCallback = config[callbackName];\n\n      if (shouldSetCallback != null) {\n        responderEvent.currentTarget = node;\n\n        if (shouldSetCallback(responderEvent) === true) {\n          // Start the path from the potential responder\n          var prunedIdPath = idPath.slice(idPath.indexOf(id));\n          return {\n            id: id,\n            node: node,\n            idPath: prunedIdPath\n          };\n        }\n      }\n    }; // capture\n\n\n    for (var i = idPath.length - 1; i >= 0; i--) {\n      var id = idPath[i];\n      var node = nodePath[i];\n      var result = check(id, node, shouldSetCallbackCaptureName);\n\n      if (result != null) {\n        return result;\n      }\n\n      if (responderEvent.isPropagationStopped() === true) {\n        return;\n      }\n    } // bubble\n\n\n    if (bubbles) {\n      for (var _i = 0; _i < idPath.length; _i++) {\n        var _id = idPath[_i];\n        var _node = nodePath[_i];\n\n        var _result = check(_id, _node, shouldSetCallbackBubbleName);\n\n        if (_result != null) {\n          return _result;\n        }\n\n        if (responderEvent.isPropagationStopped() === true) {\n          return;\n        }\n      }\n    } else {\n      var _id2 = idPath[0];\n      var _node2 = nodePath[0];\n      var target = domEvent.target;\n\n      if (target === _node2) {\n        return check(_id2, _node2, shouldSetCallbackBubbleName);\n      }\n    }\n  }\n}\n/**\n * Attempt to transfer the responder.\n */\n\n\nfunction attemptTransfer(responderEvent, wantsResponder) {\n  var _currentResponder2 = currentResponder,\n      currentId = _currentResponder2.id,\n      currentNode = _currentResponder2.node;\n  var id = wantsResponder.id,\n      node = wantsResponder.node;\n\n  var _getResponderConfig2 = getResponderConfig(id),\n      onResponderGrant = _getResponderConfig2.onResponderGrant,\n      onResponderReject = _getResponderConfig2.onResponderReject;\n\n  responderEvent.bubbles = false;\n  responderEvent.cancelable = false;\n  responderEvent.currentTarget = node; // Set responder\n\n  if (currentId == null) {\n    if (onResponderGrant != null) {\n      responderEvent.currentTarget = node;\n      responderEvent.dispatchConfig.registrationName = 'onResponderGrant';\n      onResponderGrant(responderEvent);\n    }\n\n    changeCurrentResponder(wantsResponder);\n  } // Negotiate with current responder\n  else {\n      var _getResponderConfig3 = getResponderConfig(currentId),\n          onResponderTerminate = _getResponderConfig3.onResponderTerminate,\n          onResponderTerminationRequest = _getResponderConfig3.onResponderTerminationRequest;\n\n      var allowTransfer = true;\n\n      if (onResponderTerminationRequest != null) {\n        responderEvent.currentTarget = currentNode;\n        responderEvent.dispatchConfig.registrationName = 'onResponderTerminationRequest';\n\n        if (onResponderTerminationRequest(responderEvent) === false) {\n          allowTransfer = false;\n        }\n      }\n\n      if (allowTransfer) {\n        // Terminate existing responder\n        if (onResponderTerminate != null) {\n          responderEvent.currentTarget = currentNode;\n          responderEvent.dispatchConfig.registrationName = 'onResponderTerminate';\n          onResponderTerminate(responderEvent);\n        } // Grant next responder\n\n\n        if (onResponderGrant != null) {\n          responderEvent.currentTarget = node;\n          responderEvent.dispatchConfig.registrationName = 'onResponderGrant';\n          onResponderGrant(responderEvent);\n        }\n\n        changeCurrentResponder(wantsResponder);\n      } else {\n        // Reject responder request\n        if (onResponderReject != null) {\n          responderEvent.currentTarget = node;\n          responderEvent.dispatchConfig.registrationName = 'onResponderReject';\n          onResponderReject(responderEvent);\n        }\n      }\n    }\n}\n/* ------------ PUBLIC API ------------ */\n\n/**\n * Attach Listeners\n *\n * Use native events as ReactDOM doesn't have a non-plugin API to implement\n * this system.\n */\n\n\nvar documentEventsCapturePhase = ['blur', 'scroll'];\nvar documentEventsBubblePhase = [// mouse\n'mousedown', 'mousemove', 'mouseup', 'dragstart', // touch\n'touchstart', 'touchmove', 'touchend', 'touchcancel', // other\n'contextmenu', 'select', 'selectionchange'];\nexport function attachListeners() {\n  if (canUseDOM && window.__reactResponderSystemActive == null) {\n    window.addEventListener('blur', eventListener);\n    documentEventsBubblePhase.forEach(function (eventType) {\n      document.addEventListener(eventType, eventListener);\n    });\n    documentEventsCapturePhase.forEach(function (eventType) {\n      document.addEventListener(eventType, eventListener, true);\n    });\n    window.__reactResponderSystemActive = true;\n  }\n}\n/**\n * Register a node with the ResponderSystem.\n */\n\nexport function addNode(id, node, config) {\n  setResponderId(node, id);\n  responderListenersMap.set(id, config);\n}\n/**\n * Unregister a node with the ResponderSystem.\n */\n\nexport function removeNode(id) {\n  if (currentResponder.id === id) {\n    terminateResponder();\n  }\n\n  if (responderListenersMap.has(id)) {\n    responderListenersMap.delete(id);\n  }\n}\n/**\n * Allow the current responder to be terminated from within components to support\n * more complex requirements, such as use with other React libraries for working\n * with scroll views, input views, etc.\n */\n\nexport function terminateResponder() {\n  var _currentResponder3 = currentResponder,\n      id = _currentResponder3.id,\n      node = _currentResponder3.node;\n\n  if (id != null && node != null) {\n    var _getResponderConfig4 = getResponderConfig(id),\n        onResponderTerminate = _getResponderConfig4.onResponderTerminate;\n\n    if (onResponderTerminate != null) {\n      var event = createResponderEvent({});\n      event.currentTarget = node;\n      onResponderTerminate(event);\n    }\n\n    changeCurrentResponder(emptyResponder);\n  }\n\n  isEmulatingMouseEvents = false;\n  trackedTouchCount = 0;\n}\n/**\n * Allow unit tests to inspect the current responder in the system.\n * FOR TESTING ONLY.\n */\n\nexport function getResponderNode() {\n  return currentResponder.node;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}