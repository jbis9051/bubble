{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _Dimensions = _interopRequireDefault(require(\"../../exports/Dimensions\"));\n\nvar _findNodeHandle = _interopRequireDefault(require(\"../../exports/findNodeHandle\"));\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nvar _Platform = _interopRequireDefault(require(\"../../exports/Platform\"));\n\nvar _TextInputState = _interopRequireDefault(require(\"../TextInputState\"));\n\nvar _UIManager = _interopRequireDefault(require(\"../../exports/UIManager\"));\n\nvar _warning = _interopRequireDefault(require(\"fbjs/lib/warning\"));\n\nvar emptyObject = {};\nvar IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;\nvar ScrollResponderMixin = {\n  scrollResponderMixinGetInitialState: function scrollResponderMixinGetInitialState() {\n    return {\n      isTouching: false,\n      lastMomentumScrollBeginTime: 0,\n      lastMomentumScrollEndTime: 0,\n      observedScrollSinceBecomingResponder: false,\n      becameResponderWhileAnimating: false\n    };\n  },\n  scrollResponderHandleScrollShouldSetResponder: function scrollResponderHandleScrollShouldSetResponder() {\n    return this.state.isTouching;\n  },\n  scrollResponderHandleStartShouldSetResponder: function scrollResponderHandleStartShouldSetResponder() {\n    return false;\n  },\n  scrollResponderHandleStartShouldSetResponderCapture: function scrollResponderHandleStartShouldSetResponderCapture(e) {\n    return this.scrollResponderIsAnimating();\n  },\n  scrollResponderHandleResponderReject: function scrollResponderHandleResponderReject() {\n    (0, _warning.default)(false, \"ScrollView doesn't take rejection well - scrolls anyway\");\n  },\n  scrollResponderHandleTerminationRequest: function scrollResponderHandleTerminationRequest() {\n    return !this.state.observedScrollSinceBecomingResponder;\n  },\n  scrollResponderHandleTouchEnd: function scrollResponderHandleTouchEnd(e) {\n    var nativeEvent = e.nativeEvent;\n    this.state.isTouching = nativeEvent.touches.length !== 0;\n    this.props.onTouchEnd && this.props.onTouchEnd(e);\n  },\n  scrollResponderHandleResponderRelease: function scrollResponderHandleResponderRelease(e) {\n    this.props.onResponderRelease && this.props.onResponderRelease(e);\n\n    var currentlyFocusedTextInput = _TextInputState.default.currentlyFocusedField();\n\n    if (!this.props.keyboardShouldPersistTaps && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && !this.state.observedScrollSinceBecomingResponder && !this.state.becameResponderWhileAnimating) {\n      this.props.onScrollResponderKeyboardDismissed && this.props.onScrollResponderKeyboardDismissed(e);\n\n      _TextInputState.default.blurTextInput(currentlyFocusedTextInput);\n    }\n  },\n  scrollResponderHandleScroll: function scrollResponderHandleScroll(e) {\n    this.state.observedScrollSinceBecomingResponder = true;\n    this.props.onScroll && this.props.onScroll(e);\n  },\n  scrollResponderHandleResponderGrant: function scrollResponderHandleResponderGrant(e) {\n    this.state.observedScrollSinceBecomingResponder = false;\n    this.props.onResponderGrant && this.props.onResponderGrant(e);\n    this.state.becameResponderWhileAnimating = this.scrollResponderIsAnimating();\n  },\n  scrollResponderHandleScrollBeginDrag: function scrollResponderHandleScrollBeginDrag(e) {\n    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);\n  },\n  scrollResponderHandleScrollEndDrag: function scrollResponderHandleScrollEndDrag(e) {\n    this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);\n  },\n  scrollResponderHandleMomentumScrollBegin: function scrollResponderHandleMomentumScrollBegin(e) {\n    this.state.lastMomentumScrollBeginTime = Date.now();\n    this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);\n  },\n  scrollResponderHandleMomentumScrollEnd: function scrollResponderHandleMomentumScrollEnd(e) {\n    this.state.lastMomentumScrollEndTime = Date.now();\n    this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);\n  },\n  scrollResponderHandleTouchStart: function scrollResponderHandleTouchStart(e) {\n    this.state.isTouching = true;\n    this.props.onTouchStart && this.props.onTouchStart(e);\n  },\n  scrollResponderHandleTouchMove: function scrollResponderHandleTouchMove(e) {\n    this.props.onTouchMove && this.props.onTouchMove(e);\n  },\n  scrollResponderIsAnimating: function scrollResponderIsAnimating() {\n    var now = Date.now();\n    var timeSinceLastMomentumScrollEnd = now - this.state.lastMomentumScrollEndTime;\n    var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || this.state.lastMomentumScrollEndTime < this.state.lastMomentumScrollBeginTime;\n    return isAnimating;\n  },\n  scrollResponderGetScrollableNode: function scrollResponderGetScrollableNode() {\n    return this.getScrollableNode ? this.getScrollableNode() : (0, _findNodeHandle.default)(this);\n  },\n  scrollResponderScrollTo: function scrollResponderScrollTo(x, y, animated) {\n    if (typeof x === 'number') {\n      console.warn('`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.');\n    } else {\n      var _ref = x || emptyObject;\n\n      x = _ref.x;\n      y = _ref.y;\n      animated = _ref.animated;\n    }\n\n    var node = this.scrollResponderGetScrollableNode();\n    var left = x || 0;\n    var top = y || 0;\n\n    if (typeof node.scroll === 'function') {\n      node.scroll({\n        top: top,\n        left: left,\n        behavior: !animated ? 'auto' : 'smooth'\n      });\n    } else {\n      node.scrollLeft = left;\n      node.scrollTop = top;\n    }\n  },\n  scrollResponderZoomTo: function scrollResponderZoomTo(rect, animated) {\n    if (_Platform.default.OS !== 'ios') {\n      (0, _invariant.default)('zoomToRect is not implemented');\n    }\n  },\n  scrollResponderFlashScrollIndicators: function scrollResponderFlashScrollIndicators() {},\n  scrollResponderScrollNativeHandleToKeyboard: function scrollResponderScrollNativeHandleToKeyboard(nodeHandle, additionalOffset, preventNegativeScrollOffset) {\n    this.additionalScrollOffset = additionalOffset || 0;\n    this.preventNegativeScrollOffset = !!preventNegativeScrollOffset;\n\n    _UIManager.default.measureLayout(nodeHandle, (0, _findNodeHandle.default)(this.getInnerViewNode()), this.scrollResponderTextInputFocusError, this.scrollResponderInputMeasureAndScrollToKeyboard);\n  },\n  scrollResponderInputMeasureAndScrollToKeyboard: function scrollResponderInputMeasureAndScrollToKeyboard(left, top, width, height) {\n    var keyboardScreenY = _Dimensions.default.get('window').height;\n\n    if (this.keyboardWillOpenTo) {\n      keyboardScreenY = this.keyboardWillOpenTo.endCoordinates.screenY;\n    }\n\n    var scrollOffsetY = top - keyboardScreenY + height + this.additionalScrollOffset;\n\n    if (this.preventNegativeScrollOffset) {\n      scrollOffsetY = Math.max(0, scrollOffsetY);\n    }\n\n    this.scrollResponderScrollTo({\n      x: 0,\n      y: scrollOffsetY,\n      animated: true\n    });\n    this.additionalOffset = 0;\n    this.preventNegativeScrollOffset = false;\n  },\n  scrollResponderTextInputFocusError: function scrollResponderTextInputFocusError(e) {\n    console.error('Error measuring text field: ', e);\n  },\n  UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {\n    this.keyboardWillOpenTo = null;\n    this.additionalScrollOffset = 0;\n  },\n  scrollResponderKeyboardWillShow: function scrollResponderKeyboardWillShow(e) {\n    this.keyboardWillOpenTo = e;\n    this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);\n  },\n  scrollResponderKeyboardWillHide: function scrollResponderKeyboardWillHide(e) {\n    this.keyboardWillOpenTo = null;\n    this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);\n  },\n  scrollResponderKeyboardDidShow: function scrollResponderKeyboardDidShow(e) {\n    if (e) {\n      this.keyboardWillOpenTo = e;\n    }\n\n    this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);\n  },\n  scrollResponderKeyboardDidHide: function scrollResponderKeyboardDidHide(e) {\n    this.keyboardWillOpenTo = null;\n    this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);\n  }\n};\nvar ScrollResponder = {\n  Mixin: ScrollResponderMixin\n};\nvar _default = ScrollResponder;\nexports.default = _default;","map":{"version":3,"names":["emptyObject","IS_ANIMATING_TOUCH_START_THRESHOLD_MS","ScrollResponderMixin","scrollResponderMixinGetInitialState","isTouching","lastMomentumScrollBeginTime","lastMomentumScrollEndTime","observedScrollSinceBecomingResponder","becameResponderWhileAnimating","scrollResponderHandleScrollShouldSetResponder","state","scrollResponderHandleStartShouldSetResponder","scrollResponderHandleStartShouldSetResponderCapture","e","scrollResponderIsAnimating","scrollResponderHandleResponderReject","warning","scrollResponderHandleTerminationRequest","scrollResponderHandleTouchEnd","nativeEvent","touches","length","props","onTouchEnd","scrollResponderHandleResponderRelease","onResponderRelease","currentlyFocusedTextInput","TextInputState","currentlyFocusedField","keyboardShouldPersistTaps","target","onScrollResponderKeyboardDismissed","blurTextInput","scrollResponderHandleScroll","onScroll","scrollResponderHandleResponderGrant","onResponderGrant","scrollResponderHandleScrollBeginDrag","onScrollBeginDrag","scrollResponderHandleScrollEndDrag","onScrollEndDrag","scrollResponderHandleMomentumScrollBegin","Date","now","onMomentumScrollBegin","scrollResponderHandleMomentumScrollEnd","onMomentumScrollEnd","scrollResponderHandleTouchStart","onTouchStart","scrollResponderHandleTouchMove","onTouchMove","timeSinceLastMomentumScrollEnd","isAnimating","scrollResponderGetScrollableNode","getScrollableNode","findNodeHandle","scrollResponderScrollTo","x","y","animated","console","warn","_ref","node","left","top","scroll","behavior","scrollLeft","scrollTop","scrollResponderZoomTo","rect","Platform","OS","invariant","scrollResponderFlashScrollIndicators","scrollResponderScrollNativeHandleToKeyboard","nodeHandle","additionalOffset","preventNegativeScrollOffset","additionalScrollOffset","UIManager","measureLayout","getInnerViewNode","scrollResponderTextInputFocusError","scrollResponderInputMeasureAndScrollToKeyboard","width","height","keyboardScreenY","Dimensions","get","keyboardWillOpenTo","endCoordinates","screenY","scrollOffsetY","Math","max","error","UNSAFE_componentWillMount","scrollResponderKeyboardWillShow","onKeyboardWillShow","scrollResponderKeyboardWillHide","onKeyboardWillHide","scrollResponderKeyboardDidShow","onKeyboardDidShow","scrollResponderKeyboardDidHide","onKeyboardDidHide","ScrollResponder","Mixin"],"sources":["/Users/nick/WebstormProjects/life256/packages/js/node_modules/react-native-web/dist/modules/ScrollResponder/index.js"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport Dimensions from '../../exports/Dimensions';\nimport findNodeHandle from '../../exports/findNodeHandle';\nimport invariant from 'fbjs/lib/invariant';\nimport Platform from '../../exports/Platform';\nimport TextInputState from '../TextInputState';\nimport UIManager from '../../exports/UIManager';\nimport warning from 'fbjs/lib/warning';\n/**\n * Mixin that can be integrated in order to handle scrolling that plays well\n * with `ResponderEventPlugin`. Integrate with your platform specific scroll\n * views, or even your custom built (every-frame animating) scroll views so that\n * all of these systems play well with the `ResponderEventPlugin`.\n *\n * iOS scroll event timing nuances:\n * ===============================\n *\n *\n * Scrolling without bouncing, if you touch down:\n * -------------------------------\n *\n * 1. `onMomentumScrollBegin` (when animation begins after letting up)\n *    ... physical touch starts ...\n * 2. `onTouchStartCapture`   (when you press down to stop the scroll)\n * 3. `onTouchStart`          (same, but bubble phase)\n * 4. `onResponderRelease`    (when lifting up - you could pause forever before * lifting)\n * 5. `onMomentumScrollEnd`\n *\n *\n * Scrolling with bouncing, if you touch down:\n * -------------------------------\n *\n * 1. `onMomentumScrollBegin` (when animation begins after letting up)\n *    ... bounce begins ...\n *    ... some time elapses ...\n *    ... physical touch during bounce ...\n * 2. `onMomentumScrollEnd`   (Makes no sense why this occurs first during bounce)\n * 3. `onTouchStartCapture`   (immediately after `onMomentumScrollEnd`)\n * 4. `onTouchStart`          (same, but bubble phase)\n * 5. `onTouchEnd`            (You could hold the touch start for a long time)\n * 6. `onMomentumScrollBegin` (When releasing the view starts bouncing back)\n *\n * So when we receive an `onTouchStart`, how can we tell if we are touching\n * *during* an animation (which then causes the animation to stop)? The only way\n * to tell is if the `touchStart` occurred immediately after the\n * `onMomentumScrollEnd`.\n *\n * This is abstracted out for you, so you can just call this.scrollResponderIsAnimating() if\n * necessary\n *\n * `ScrollResponder` also includes logic for blurring a currently focused input\n * if one is focused while scrolling. The `ScrollResponder` is a natural place\n * to put this logic since it can support not dismissing the keyboard while\n * scrolling, unless a recognized \"tap\"-like gesture has occurred.\n *\n * The public lifecycle API includes events for keyboard interaction, responder\n * interaction, and scrolling (among others). The keyboard callbacks\n * `onKeyboardWill/Did/*` are *global* events, but are invoked on scroll\n * responder's props so that you can guarantee that the scroll responder's\n * internal state has been updated accordingly (and deterministically) by\n * the time the props callbacks are invoke. Otherwise, you would always wonder\n * if the scroll responder is currently in a state where it recognizes new\n * keyboard positions etc. If coordinating scrolling with keyboard movement,\n * *always* use these hooks instead of listening to your own global keyboard\n * events.\n *\n * Public keyboard lifecycle API: (props callbacks)\n *\n * Standard Keyboard Appearance Sequence:\n *\n *   this.props.onKeyboardWillShow\n *   this.props.onKeyboardDidShow\n *\n * `onScrollResponderKeyboardDismissed` will be invoked if an appropriate\n * tap inside the scroll responder's scrollable region was responsible\n * for the dismissal of the keyboard. There are other reasons why the\n * keyboard could be dismissed.\n *\n *   this.props.onScrollResponderKeyboardDismissed\n *\n * Standard Keyboard Hide Sequence:\n *\n *   this.props.onKeyboardWillHide\n *   this.props.onKeyboardDidHide\n */\n\nvar emptyObject = {};\nvar IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;\nvar ScrollResponderMixin = {\n  // mixins: [Subscribable.Mixin],\n  scrollResponderMixinGetInitialState: function scrollResponderMixinGetInitialState() {\n    return {\n      isTouching: false,\n      lastMomentumScrollBeginTime: 0,\n      lastMomentumScrollEndTime: 0,\n      // Reset to false every time becomes responder. This is used to:\n      // - Determine if the scroll view has been scrolled and therefore should\n      // refuse to give up its responder lock.\n      // - Determine if releasing should dismiss the keyboard when we are in\n      // tap-to-dismiss mode (!this.props.keyboardShouldPersistTaps).\n      observedScrollSinceBecomingResponder: false,\n      becameResponderWhileAnimating: false\n    };\n  },\n\n  /**\n   * Invoke this from an `onScroll` event.\n   */\n  scrollResponderHandleScrollShouldSetResponder: function scrollResponderHandleScrollShouldSetResponder() {\n    return this.state.isTouching;\n  },\n\n  /**\n   * Merely touch starting is not sufficient for a scroll view to become the\n   * responder. Being the \"responder\" means that the very next touch move/end\n   * event will result in an action/movement.\n   *\n   * Invoke this from an `onStartShouldSetResponder` event.\n   *\n   * `onStartShouldSetResponder` is used when the next move/end will trigger\n   * some UI movement/action, but when you want to yield priority to views\n   * nested inside of the view.\n   *\n   * There may be some cases where scroll views actually should return `true`\n   * from `onStartShouldSetResponder`: Any time we are detecting a standard tap\n   * that gives priority to nested views.\n   *\n   * - If a single tap on the scroll view triggers an action such as\n   *   recentering a map style view yet wants to give priority to interaction\n   *   views inside (such as dropped pins or labels), then we would return true\n   *   from this method when there is a single touch.\n   *\n   * - Similar to the previous case, if a two finger \"tap\" should trigger a\n   *   zoom, we would check the `touches` count, and if `>= 2`, we would return\n   *   true.\n   *\n   */\n  scrollResponderHandleStartShouldSetResponder: function scrollResponderHandleStartShouldSetResponder() {\n    return false;\n  },\n\n  /**\n   * There are times when the scroll view wants to become the responder\n   * (meaning respond to the next immediate `touchStart/touchEnd`), in a way\n   * that *doesn't* give priority to nested views (hence the capture phase):\n   *\n   * - Currently animating.\n   * - Tapping anywhere that is not the focused input, while the keyboard is\n   *   up (which should dismiss the keyboard).\n   *\n   * Invoke this from an `onStartShouldSetResponderCapture` event.\n   */\n  scrollResponderHandleStartShouldSetResponderCapture: function scrollResponderHandleStartShouldSetResponderCapture(e) {\n    // First see if we want to eat taps while the keyboard is up\n    // var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();\n    // if (!this.props.keyboardShouldPersistTaps &&\n    //   currentlyFocusedTextInput != null &&\n    //   e.target !== currentlyFocusedTextInput) {\n    //   return true;\n    // }\n    return this.scrollResponderIsAnimating();\n  },\n\n  /**\n   * Invoke this from an `onResponderReject` event.\n   *\n   * Some other element is not yielding its role as responder. Normally, we'd\n   * just disable the `UIScrollView`, but a touch has already began on it, the\n   * `UIScrollView` will not accept being disabled after that. The easiest\n   * solution for now is to accept the limitation of disallowing this\n   * altogether. To improve this, find a way to disable the `UIScrollView` after\n   * a touch has already started.\n   */\n  scrollResponderHandleResponderReject: function scrollResponderHandleResponderReject() {\n    warning(false, \"ScrollView doesn't take rejection well - scrolls anyway\");\n  },\n\n  /**\n   * We will allow the scroll view to give up its lock iff it acquired the lock\n   * during an animation. This is a very useful default that happens to satisfy\n   * many common user experiences.\n   *\n   * - Stop a scroll on the left edge, then turn that into an outer view's\n   *   backswipe.\n   * - Stop a scroll mid-bounce at the top, continue pulling to have the outer\n   *   view dismiss.\n   * - However, without catching the scroll view mid-bounce (while it is\n   *   motionless), if you drag far enough for the scroll view to become\n   *   responder (and therefore drag the scroll view a bit), any backswipe\n   *   navigation of a swipe gesture higher in the view hierarchy, should be\n   *   rejected.\n   */\n  scrollResponderHandleTerminationRequest: function scrollResponderHandleTerminationRequest() {\n    return !this.state.observedScrollSinceBecomingResponder;\n  },\n\n  /**\n   * Invoke this from an `onTouchEnd` event.\n   *\n   * @param {SyntheticEvent} e Event.\n   */\n  scrollResponderHandleTouchEnd: function scrollResponderHandleTouchEnd(e) {\n    var nativeEvent = e.nativeEvent;\n    this.state.isTouching = nativeEvent.touches.length !== 0;\n    this.props.onTouchEnd && this.props.onTouchEnd(e);\n  },\n\n  /**\n   * Invoke this from an `onResponderRelease` event.\n   */\n  scrollResponderHandleResponderRelease: function scrollResponderHandleResponderRelease(e) {\n    this.props.onResponderRelease && this.props.onResponderRelease(e); // By default scroll views will unfocus a textField\n    // if another touch occurs outside of it\n\n    var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();\n\n    if (!this.props.keyboardShouldPersistTaps && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && !this.state.observedScrollSinceBecomingResponder && !this.state.becameResponderWhileAnimating) {\n      this.props.onScrollResponderKeyboardDismissed && this.props.onScrollResponderKeyboardDismissed(e);\n      TextInputState.blurTextInput(currentlyFocusedTextInput);\n    }\n  },\n  scrollResponderHandleScroll: function scrollResponderHandleScroll(e) {\n    this.state.observedScrollSinceBecomingResponder = true;\n    this.props.onScroll && this.props.onScroll(e);\n  },\n\n  /**\n   * Invoke this from an `onResponderGrant` event.\n   */\n  scrollResponderHandleResponderGrant: function scrollResponderHandleResponderGrant(e) {\n    this.state.observedScrollSinceBecomingResponder = false;\n    this.props.onResponderGrant && this.props.onResponderGrant(e);\n    this.state.becameResponderWhileAnimating = this.scrollResponderIsAnimating();\n  },\n\n  /**\n   * Unfortunately, `onScrollBeginDrag` also fires when *stopping* the scroll\n   * animation, and there's not an easy way to distinguish a drag vs. stopping\n   * momentum.\n   *\n   * Invoke this from an `onScrollBeginDrag` event.\n   */\n  scrollResponderHandleScrollBeginDrag: function scrollResponderHandleScrollBeginDrag(e) {\n    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);\n  },\n\n  /**\n   * Invoke this from an `onScrollEndDrag` event.\n   */\n  scrollResponderHandleScrollEndDrag: function scrollResponderHandleScrollEndDrag(e) {\n    this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);\n  },\n\n  /**\n   * Invoke this from an `onMomentumScrollBegin` event.\n   */\n  scrollResponderHandleMomentumScrollBegin: function scrollResponderHandleMomentumScrollBegin(e) {\n    this.state.lastMomentumScrollBeginTime = Date.now();\n    this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);\n  },\n\n  /**\n   * Invoke this from an `onMomentumScrollEnd` event.\n   */\n  scrollResponderHandleMomentumScrollEnd: function scrollResponderHandleMomentumScrollEnd(e) {\n    this.state.lastMomentumScrollEndTime = Date.now();\n    this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);\n  },\n\n  /**\n   * Invoke this from an `onTouchStart` event.\n   *\n   * Since we know that the `SimpleEventPlugin` occurs later in the plugin\n   * order, after `ResponderEventPlugin`, we can detect that we were *not*\n   * permitted to be the responder (presumably because a contained view became\n   * responder). The `onResponderReject` won't fire in that case - it only\n   * fires when a *current* responder rejects our request.\n   *\n   * @param {SyntheticEvent} e Touch Start event.\n   */\n  scrollResponderHandleTouchStart: function scrollResponderHandleTouchStart(e) {\n    this.state.isTouching = true;\n    this.props.onTouchStart && this.props.onTouchStart(e);\n  },\n\n  /**\n   * Invoke this from an `onTouchMove` event.\n   *\n   * Since we know that the `SimpleEventPlugin` occurs later in the plugin\n   * order, after `ResponderEventPlugin`, we can detect that we were *not*\n   * permitted to be the responder (presumably because a contained view became\n   * responder). The `onResponderReject` won't fire in that case - it only\n   * fires when a *current* responder rejects our request.\n   *\n   * @param {SyntheticEvent} e Touch Start event.\n   */\n  scrollResponderHandleTouchMove: function scrollResponderHandleTouchMove(e) {\n    this.props.onTouchMove && this.props.onTouchMove(e);\n  },\n\n  /**\n   * A helper function for this class that lets us quickly determine if the\n   * view is currently animating. This is particularly useful to know when\n   * a touch has just started or ended.\n   */\n  scrollResponderIsAnimating: function scrollResponderIsAnimating() {\n    var now = Date.now();\n    var timeSinceLastMomentumScrollEnd = now - this.state.lastMomentumScrollEndTime;\n    var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || this.state.lastMomentumScrollEndTime < this.state.lastMomentumScrollBeginTime;\n    return isAnimating;\n  },\n\n  /**\n   * Returns the node that represents native view that can be scrolled.\n   * Components can pass what node to use by defining a `getScrollableNode`\n   * function otherwise `this` is used.\n   */\n  scrollResponderGetScrollableNode: function scrollResponderGetScrollableNode() {\n    return this.getScrollableNode ? this.getScrollableNode() : findNodeHandle(this);\n  },\n\n  /**\n   * A helper function to scroll to a specific point in the scrollview.\n   * This is currently used to help focus on child textviews, but can also\n   * be used to quickly scroll to any element we want to focus. Syntax:\n   *\n   * scrollResponderScrollTo(options: {x: number = 0; y: number = 0; animated: boolean = true})\n   *\n   * Note: The weird argument signature is due to the fact that, for historical reasons,\n   * the function also accepts separate arguments as as alternative to the options object.\n   * This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.\n   */\n  scrollResponderScrollTo: function scrollResponderScrollTo(x, y, animated) {\n    if (typeof x === 'number') {\n      console.warn('`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.');\n    } else {\n      var _ref = x || emptyObject;\n\n      x = _ref.x;\n      y = _ref.y;\n      animated = _ref.animated;\n    }\n\n    var node = this.scrollResponderGetScrollableNode();\n    var left = x || 0;\n    var top = y || 0;\n\n    if (typeof node.scroll === 'function') {\n      node.scroll({\n        top: top,\n        left: left,\n        behavior: !animated ? 'auto' : 'smooth'\n      });\n    } else {\n      node.scrollLeft = left;\n      node.scrollTop = top;\n    }\n  },\n\n  /**\n   * A helper function to zoom to a specific rect in the scrollview. The argument has the shape\n   * {x: number; y: number; width: number; height: number; animated: boolean = true}\n   *\n   * @platform ios\n   */\n  scrollResponderZoomTo: function scrollResponderZoomTo(rect, animated) // deprecated, put this inside the rect argument instead\n  {\n    if (Platform.OS !== 'ios') {\n      invariant('zoomToRect is not implemented');\n    }\n  },\n\n  /**\n   * Displays the scroll indicators momentarily.\n   */\n  scrollResponderFlashScrollIndicators: function scrollResponderFlashScrollIndicators() {},\n\n  /**\n   * This method should be used as the callback to onFocus in a TextInputs'\n   * parent view. Note that any module using this mixin needs to return\n   * the parent view's ref in getScrollViewRef() in order to use this method.\n   * @param {any} nodeHandle The TextInput node handle\n   * @param {number} additionalOffset The scroll view's top \"contentInset\".\n   *        Default is 0.\n   * @param {bool} preventNegativeScrolling Whether to allow pulling the content\n   *        down to make it meet the keyboard's top. Default is false.\n   */\n  scrollResponderScrollNativeHandleToKeyboard: function scrollResponderScrollNativeHandleToKeyboard(nodeHandle, additionalOffset, preventNegativeScrollOffset) {\n    this.additionalScrollOffset = additionalOffset || 0;\n    this.preventNegativeScrollOffset = !!preventNegativeScrollOffset;\n    UIManager.measureLayout(nodeHandle, findNodeHandle(this.getInnerViewNode()), this.scrollResponderTextInputFocusError, this.scrollResponderInputMeasureAndScrollToKeyboard);\n  },\n\n  /**\n   * The calculations performed here assume the scroll view takes up the entire\n   * screen - even if has some content inset. We then measure the offsets of the\n   * keyboard, and compensate both for the scroll view's \"contentInset\".\n   *\n   * @param {number} left Position of input w.r.t. table view.\n   * @param {number} top Position of input w.r.t. table view.\n   * @param {number} width Width of the text input.\n   * @param {number} height Height of the text input.\n   */\n  scrollResponderInputMeasureAndScrollToKeyboard: function scrollResponderInputMeasureAndScrollToKeyboard(left, top, width, height) {\n    var keyboardScreenY = Dimensions.get('window').height;\n\n    if (this.keyboardWillOpenTo) {\n      keyboardScreenY = this.keyboardWillOpenTo.endCoordinates.screenY;\n    }\n\n    var scrollOffsetY = top - keyboardScreenY + height + this.additionalScrollOffset; // By default, this can scroll with negative offset, pulling the content\n    // down so that the target component's bottom meets the keyboard's top.\n    // If requested otherwise, cap the offset at 0 minimum to avoid content\n    // shifting down.\n\n    if (this.preventNegativeScrollOffset) {\n      scrollOffsetY = Math.max(0, scrollOffsetY);\n    }\n\n    this.scrollResponderScrollTo({\n      x: 0,\n      y: scrollOffsetY,\n      animated: true\n    });\n    this.additionalOffset = 0;\n    this.preventNegativeScrollOffset = false;\n  },\n  scrollResponderTextInputFocusError: function scrollResponderTextInputFocusError(e) {\n    console.error('Error measuring text field: ', e);\n  },\n\n  /**\n   * `componentWillMount` is the closest thing to a  standard \"constructor\" for\n   * React components.\n   *\n   * The `keyboardWillShow` is called before input focus.\n   */\n  UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {\n    this.keyboardWillOpenTo = null;\n    this.additionalScrollOffset = 0; // this.addListenerOn(RCTDeviceEventEmitter, 'keyboardWillShow', this.scrollResponderKeyboardWillShow);\n    // this.addListenerOn(RCTDeviceEventEmitter, 'keyboardWillHide', this.scrollResponderKeyboardWillHide);\n    // this.addListenerOn(RCTDeviceEventEmitter, 'keyboardDidShow', this.scrollResponderKeyboardDidShow);\n    // this.addListenerOn(RCTDeviceEventEmitter, 'keyboardDidHide', this.scrollResponderKeyboardDidHide);\n  },\n\n  /**\n   * Warning, this may be called several times for a single keyboard opening.\n   * It's best to store the information in this method and then take any action\n   * at a later point (either in `keyboardDidShow` or other).\n   *\n   * Here's the order that events occur in:\n   * - focus\n   * - willShow {startCoordinates, endCoordinates} several times\n   * - didShow several times\n   * - blur\n   * - willHide {startCoordinates, endCoordinates} several times\n   * - didHide several times\n   *\n   * The `ScrollResponder` providesModule callbacks for each of these events.\n   * Even though any user could have easily listened to keyboard events\n   * themselves, using these `props` callbacks ensures that ordering of events\n   * is consistent - and not dependent on the order that the keyboard events are\n   * subscribed to. This matters when telling the scroll view to scroll to where\n   * the keyboard is headed - the scroll responder better have been notified of\n   * the keyboard destination before being instructed to scroll to where the\n   * keyboard will be. Stick to the `ScrollResponder` callbacks, and everything\n   * will work.\n   *\n   * WARNING: These callbacks will fire even if a keyboard is displayed in a\n   * different navigation pane. Filter out the events to determine if they are\n   * relevant to you. (For example, only if you receive these callbacks after\n   * you had explicitly focused a node etc).\n   */\n  scrollResponderKeyboardWillShow: function scrollResponderKeyboardWillShow(e) {\n    this.keyboardWillOpenTo = e;\n    this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);\n  },\n  scrollResponderKeyboardWillHide: function scrollResponderKeyboardWillHide(e) {\n    this.keyboardWillOpenTo = null;\n    this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);\n  },\n  scrollResponderKeyboardDidShow: function scrollResponderKeyboardDidShow(e) {\n    // TODO(7693961): The event for DidShow is not available on iOS yet.\n    // Use the one from WillShow and do not assign.\n    if (e) {\n      this.keyboardWillOpenTo = e;\n    }\n\n    this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);\n  },\n  scrollResponderKeyboardDidHide: function scrollResponderKeyboardDidHide(e) {\n    this.keyboardWillOpenTo = null;\n    this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);\n  }\n};\nvar ScrollResponder = {\n  Mixin: ScrollResponderMixin\n};\nexport default ScrollResponder;"],"mappings":"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"},"metadata":{},"sourceType":"script"}